---
import Layout from "../../../layouts/Layout.astro";
import CommentsSection from "../../../components/CommentsSection.jsx";
import { UserProvider } from "../../../components/context/UserContext.jsx"; // Asegúrate de que el path sea correcto

const { id } = Astro.params;

const fetchMovieDetails = async (id) => {
    let movieDetails = null;
    try {
        const response = await fetch(`http://127.0.0.1:8000/api/movie/${id}`);
        if (response.ok) {
            const result = await response.json();
            movieDetails = result.data;
        }
    } catch (error) {
        console.error('Error en la solicitud fetch:', error);
    }
    return movieDetails;
};

const fetchMovieComments = async (id) => {
    let comments = [];
    try {
        const response = await fetch(`http://127.0.0.1:8000/api/movie/${id}/reviews`);
        if (response.ok) {
            const result = await response.json();
            comments = result.data || []; // Asegúrate de que sea un arreglo
        }
    } catch (error) {
        console.error('Error en la solicitud fetch:', error);
    }
    return comments;
};

// Inicializa movieComments como un arreglo vacío para evitar el error de 'undefined'
const movieDetails = await fetchMovieDetails(id);
const movieComments = await fetchMovieComments(id) || [];
---

<Layout title="Detalles">
    <div class="max-w-5xl mx-auto pt-4 space-y-8">
      <div class="flex flex-col lg:flex-row gap-8">
        {movieDetails ? (
          <div class="flex-1 p-6 bg-gray-900 rounded-lg shadow-lg">
            <h1 class="text-3xl font-bold text-white mb-4">{movieDetails.name}</h1>
            <div class="flex items-start">
              <img src={movieDetails.image} alt={`Imagen de ${movieDetails.name}`} class="w-60 h-auto rounded mr-4" />
              <div>
                <p class="text-lg text-gray-300 mb-4">{movieDetails.synopsis}</p>
                <p class="text-sm text-gray-500 mb-4">{new Date(movieDetails.releaseDate).toLocaleDateString()}</p>
                <a href={movieDetails.urlTrailer} class="bg-zinc-200 font-medium p-2 flex gap-2 items-center" target="_blank" rel="noopener noreferrer">
                  <span>Ver trailer</span>
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <polygon points="10 8 16 12 10 16 10 8"></polygon>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        ) : (
          <div class="flex-1 p-6 bg-red-900 rounded-lg shadow-lg">
            <p class="text-white">Error en la carga de la película.</p>
          </div>
        )}

        <UserProvider>
          
            <CommentsSection movieId={id} client:load />
          
        </UserProvider>
      </div>

      <!-- Sección de comentarios anteriores -->
      <div class="max-w-3xl w-full mx-auto space-y-4">
        <h2 class="text-2xl font-bold text-white mb-4">Comentarios Anteriores</h2>
        {movieComments && movieComments.length > 0 ? (
          movieComments.map((comment) => (
            <div key={comment.review_id} class="p-4 bg-gray-700 rounded-lg shadow">
              <p class="text-white"><strong>Usuario:</strong> {comment.user_name || 'Anónimo'}</p>
              <p class="text-yellow-400"><strong>Calificación:</strong> {comment.rating}/5</p>
              <p class="text-gray-300"><strong>Comentario:</strong> {comment.comment}</p>
            </div>
          ))
        ) : (
          <p class="text-gray-400">Aún no hay comentarios para esta película.</p>
        )}
      </div>
    </div>
</Layout>
